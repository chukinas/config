#!/bin/bash

# NAME
#   create_symlink - creates symlinks and safely copies off the old file if it exists
#
# SYNOPSIS
#   create_symlink TARGET LINK_NAME
#
# DESCRIPTION
#
#   TARGET is the thing you're linking to
#   LINK_NAME is the name of the link

if [[ $# -ne 2 ]] ; then
  echo "Usage: $0: create_symlink TARGET LINK_NAME" >&2
  return 1
fi

target="$(realpath $1)" ; link_name="$2"

# TODO why did I use -d ? .bashrc for example is definitely not a directory
if [[ ! -d $target ]] ; then
  echo "$0: error: target must be a valid path" >&2
  # TODO apparently this can't be a return? Must be an exit?
  return 1
fi

config_dir=$(dirname $0)/..

. $config_dir/lib/ansi_color

backup_existing_file() {
  backup_dir="$config_dir/.bak"
  backup_dir=$(realpath $backup_dir)
  mkdir -p $backup_dir

  current_datetime=$(date "+%Y%m%d_%H%M%S")
  old_filename=$(basename $link_name)
  new_path="$backup_dir/${current_datetime}_$old_filename"

  echo -e "${yellowf}${boldon}moving $link_name to $new_path${reset}"
  mv $link_name $new_path
}

create_link() {
  echo "Creating symlink"
  ln -s $target $link_name
}

# Start Main Script
###################

echo -e "Symlinking ${cyanf}${boldon}${link_name}${reset} -> ${bluef}${boldon}${target}${reset}"

if [[ -h "$link_name" ]] ; then
  echo "Symlink found"
  if [[ "$(readlink $link_name)" -ef $target ]] ; then
    echo "Has correct target"
  else
    echo "Has wrong target"
    backup_existing_file
    create_link
  fi
elif [[ -e $link_name ]] ; then
  # TODO this SHOULD catch the case where a symlink is pointing to the wrong thing... but isn't
  echo "File already exists here, but isn't the desired link"
  backup_existing_file
  create_link
else
  echo "Link does not exist yet"
  create_link
fi

