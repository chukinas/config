
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FOLDING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" to bold the text, add cterm=bold
highlight Folded ctermfg=LightGray ctermbg=DarkMagenta
highlight FoldColumn ctermfg=LightGray ctermbg=DarkMagenta
function ExFoldExpr(lnum)
if IsAlias(a:lnum)
  return IsLineBlank(a:lnum + 1)?'<1':1
elseif (IsSectionLine(a:lnum) || IsSectionLine(a:lnum + 1))
  return 0
"elseif IsOnelineFunction(a:lnum)
"  return 1
elseif IsSectionTitle(a:lnum)
  return 1
elseif IsSectionEnd(a:lnum)
  return '<1'
elseif HasDef(a:lnum)
"elseif IsFunctionStartLine(a:lnum)
  return 2
elseif IsFoldEnd(a:lnum)
  return '<2'
else
  return -1
endif
endfunction

function IsAlias(lnum)
return getline(a:lnum)=~'\v^alias'
endfunction

function IsFunctionStartLine(lnum)
return getline(a:lnum)=~'\v^\s*defp?>.*do\s*$'
endfunction

function HasDef(lnum)
return getline(a:lnum)=~'\v^ {2}def'
endfunction

function IsFoldEnd(lnum)
return (IsEnd(a:lnum) && !IsLineBlank(a:lnum + 1)) ||
     \ (IsEnd(a:lnum - 1) && IsLineBlank(a:lnum)) ||
     \ (IsOnelineFunction(a:lnum - 1) && IsLineBlank(a:lnum))
endfunction

function IsEnd(lnum)
return getline(a:lnum)=~'\v^ {2}end\s*$'
endfunction

function IsLineBlank(lnum)
return getline(a:lnum)=~'\v^\s*$'
endfunction

function IsSectionLine(lnum)
return getline(a:lnum)=~'\v^  # \*{3} \**\s*$'
endfunction

function IsSectionTitle(lnum)
return getline(a:lnum)=~'\v^  # \*{3} \u'
endfunction

function IsSectionEnd(lnum)
return IsSectionLine(a:lnum + 2) || IsLineBeforeLastEnd(a:lnum)
endfunction

function IsModuleEnd(lnum)
return getline(a:lnum)=~'\v^end\s*$'
endfunction

function IsLineBeforeLastEnd(lnum)
return IsModuleEnd(a:lnum + 1)
endfunction

function IsOnelineFunction(lnum)
return getline(a:lnum)=~'\v^\s*defp?>.*do\:'
endfunction


augroup folds
autocmd!
autocmd InsertEnter * let w:oldfdm = &l:foldmethod | setlocal foldmethod=manual
autocmd InsertLeave *
        \ if exists('w:oldfdm') |
        \   let &l:foldmethod = w:oldfdm |
        \   unlet w:oldfdm |
        \ endif |
        \ normal! zv
augroup END

nnoremap <leader>z zMgg<C-o>zozo

