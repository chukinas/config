#!/bin/bash

. $COMOTO_CLI_LIB/print

# TODO add a check for e.g. unused elixir vars. Or really, anything that causes a compilation error with --warnings-as-errors

_comoto_cli_command_summary='Quality-control your code locally, before it gets to Circle CI'
_comoto_cli_command_usage='comoto_cli check [OPTIONS] [CHECKS]'

_comoto_cli_help() {
  cat <<EOF

Options:
  -h, --help      Print this help and exit

Checks:
  credo
  dialyzer        Static code check. Elixir only.
  test            Unit test the repo
EOF

  echo
  print_help_h2 'Examples'
  print_help_ex 'comoto_cli check                  # Run all (both credo and dialyzer)'
  print_help_ex 'comoto_cli check credo            # Run credo only'
  print_help_ex 'comoto_cli check dialyzer         # Run dialyzer only'
  print_help_ex 'comoto_cli check credo dialyzer   # Run both credo and dialyzer'
  print_help_ex 'comoto_cli check -h               # Print this help message'
  print_help_ex 'comoto_cli check --help           # Print this help message'
  echo
  echo 'All checks are run in the local rz container.'
  echo
}

_credo() {
  comoto_cli bash rz 'mix credo'

  credo_exit_code=$?

  echo
  if [[ ! $credo_exit_code -ne 0 ]]
  then
    # TODO when Ctrl+C, the exit code is wrong
    print_success 'Credo check succeeded'
  else
    print_fail 'Credo check failed'
  fi

  return $credo_exit_code
}

_dialyzer() {
  local monorepo_dir="$(comoto_cli path monorepo)"
  local results_path="$monorepo_dir/dialyzer.txt"
  if [[ -f $results_path ]] ; then
    echo "$results_path already exists. Removing..."
    rm $results_path
  fi
  comoto_cli bash rz 'mix dialyzer' | tee $results_path
  ci_scripts_dir="$monorepo_dir/ci"
  $ci_scripts_dir/dialyzer_check.sh $results_path $ci_scripts_dir/dialyzer_diff.sh

  local exit_code=$?

  echo
  if [[ $exit_code -eq 0 ]]
  then
    print_success 'Dialyzer check succeeded'
  else
    print_fail 'Dialyzer check failed'
  fi

  return $exit_code
}

local commands=''
_add_a_new_command() {
  if [[ -z $commands ]] ; then
    commands="$1"
  else
    commands="$commands && $1"
  fi
}

_comoto_cli_command_completion() {
  local valid_checks=(credo dialyzer test)
  local cur_word="${COMP_WORDS[$COMP_CWORD]}"
  for i_arg
  do
    if [[ $i_arg != $cur_word ]] ; then
      valid_checks=("${valid_checks[@]/$i_arg}")
    fi
  done
  # TODO DRY this line out? I keep having go find and copy it from other scripts
  unused_checks="${valid_checks[@]}"
  # TODO standardize my var names. Elsewhere I use cur_arg
  COMPREPLY=( $(compgen -W  "$unused_checks" -- "$cur_word") )
}

_comoto_cli_execute() {
  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_LIB/render_help; return 0;;
      *) break ;;
    esac
    shift
  done

  if [[ $# -eq 0 ]] ; then
    # TODO add 'test' here
    print_and_eval_command 'comoto_cli check credo && comoto_cli check dialyzer'
    return $?
  elif [[ $# -eq 1 ]] ; then
    case "$1" in
      credo)
        comoto_cli bash rz 'mix credo'
        return $?
        ;;
      dialyzer)
        _dialyzer
        return $?
        ;;
      test)
        # TODO add test for all other repos
        etl-test
        return $?
        ;;
    esac
  fi

  # for arg
  # do
  #   case $arg in
  #     credo) _add_a_new_command "comoto_cli bash rz 'mix credo'" ;;
  #     # TODO This actually needs its own script
  #     dialyzer) _add_a_new_command "comoto_cli bash rz 'mix dialyzer'" ;;
  #     *) print_usage_error && return 1 ;;
  #   esac
  # done
  # print_and_eval_command -c "$commands"
  # TODO typing 'm check -he' should produce an error, but credo runs anyway
}
