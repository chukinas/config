#!/bin/bash

# TODO add a check for e.g. unused elixir vars. Or really, anything that causes a compilation error with --warnings-as-errors
. $COMOTO_CLI_ROOT/lib/print

_comoto_cli_command_summary='Quality-control your code locally, before it gets to Circle CI'
_comoto_cli_command_usage='comoto_cli check [OPTIONS] [CHECKS]'

_comoto_cli_command_help() {
  cat <<EOF

Options:
  -h, --help      Print this help and exit

Checks:
  credo
  dialyzer        (not yet implemented)

Examples
  comoto_cli check                  # Run all (both credo and dialyzer)
  comoto_cli check credo            # Run credo only
  comoto_cli check dialyzer         # Run dialyzer only
  comoto_cli check credo dialyzer   # Run both credo and dialyzer
  comoto_cli check -h               # Print this help message
  comoto_cli check --help           # Print this help message

All checks are run in the local rz container.

EOF
}

_credo() {
  comoto_cli bash rz 'mix credo'

  credo_exit_code=$?

  echo
  if [[ ! $credo_exit_code -ne 0 ]]
  then
    # TODO when Ctrl+C, the exit code is wrong
    print_success 'Credo check succeeded'
  else
    print_fail 'Credo check failed'
  fi

  return $credo_exit_code
}

_dialyzer() {
  # TODO DRY this out?
  comoto_cli bash rz 'mix dialyzer'

  dialyzer_exit_code=$?

  echo
  if [[ $dialyzer_exit_code -eq 0 ]]
  then
    print_success 'Credo check succeeded'
  else
    print_fail 'Credo check failed'
  fi

  return $dialyzer_exit_code
}

local commands=''
_add_a_new_command() {
  if [[ -z $commands ]] ; then
    commands="$1"
  else
    commands="$commands && $1"
  fi
}

_comoto_cli_command_execute() {
  if [[ $# -eq 0 ]] ; then
    echo "arg count: $#"
    comoto_cli check credo dialyzer
    return $?
  fi

  for arg
  do
    case $arg in
      credo) _add_a_new_command "comoto_cli bash rz 'mix credo'" ;;
      # TODO This actually needs its own script
      dialyzer) _add_a_new_command "comoto_cli bash rz 'mix dialyzer'" ;;
      *) print_usage_error && return 1 ;;
    esac
  done
  print_and_eval_command -c "$commands"
  # TODO typing 'm check -he' should produce an error, but credo runs anyway
}

_comoto_cli_command_completion() {
  local valid_checks=(credo dialyzer)
  local cur_word="${COMP_WORDS[$COMP_CWORD]}"
  for i_arg
  do
    if [[ $i_arg != $cur_word ]] ; then
      valid_checks=("${valid_checks[@]/$i_arg}")
    fi
  done
  # TODO DRY this line out? I keep having go find and copy it from other scripts
  unused_checks="${valid_checks[@]}"
  # TODO standardize my var names. Elsewhere I use cur_arg
  COMPREPLY=( $(compgen -W  "$unused_checks" -- "$cur_word") )
}
