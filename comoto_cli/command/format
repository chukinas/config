#!/bin/bash

. $COMOTO_CLI_LIB/print

_comoto_cli_command_summary='Format elixir files'
_comoto_cli_command_usage='comoto_cli format [OPTIONS] FILEPATH'

_comoto_cli_help() {
  print_help_h2 'Options'
  print_help_li '-h, --help  Print this help and exit'

  print_help_h2 'Examples'
  print_help_ex    "comoto_cli format $COMOTO_PROJECT_ROOT/monorepo/redline/.iex.exs"
}

_comoto_cli_command_completion() {
  if repo_profile=$($COMOTO_CLI_LIB/recurse_up_find_file . comoto_cli_repo_profile) ; then
    . $repo_profile
  else
    print_usage_error
    return 1
  fi

  echo "the arg is '$1'"
  local valid_args="--help $comoto_cli_repo_container_root"
  if [[ $# -gt 1 ]] ; then
    return 1
  else
    opts=$(compgen -W "$valid_args" -- "$1")
    paths=$(compgen -o default "$1")
    COMPREPLY=( $opts $paths )
  fi
}

_comoto_cli_execute() {
  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_ROOT/lib/render_help; return 0;;
      *) break ;;
    esac
    shift
  done

  filepath="$(readlink -f "$1")"
  if [[ ! -f $filepath ]] ; then
    print_usage_error
    return 1
  fi

  if repo_profile=$($COMOTO_CLI_LIB/recurse_up_find_file $(dirname $filepath) comoto_cli_repo_profile) ; then
    . $repo_profile
  else
    print_usage_error
    return 1
  fi

  echo "local filepath:       $filepath"
  echo "local file directory: $(dirname $filepath)"
  echo "local repo directory: $comoto_cli_repo_dir"

  # TODO this needs to be in the repo profile
  echo "container filepath:   $(realpath --relative-to=$comoto_cli_repo_dir/lib $filepath)"
  # echo "relative path:        $comoto_cli_repo_dir"
  # TODO for jrms: filepaths start with lib/ ...   therefore, remove the "$comoto_cli_repo_dir/jp_replat..."
}

# TODO add autocomplete to filepath
