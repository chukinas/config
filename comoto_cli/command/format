#!/bin/bash

. $COMOTO_CLI_LIB/print

_comoto_cli_command_summary='Format elixir files'
_comoto_cli_command_usage='comoto_cli format FILEPATH'

_comoto_cli_help() {
  print_help_h2 'Options'
  print_help_li '-h, --help  Print this help and exit'

  print_help_h2 'Examples'
  print_help_ex    "comoto_cli format $COMOTO_PROJECT_ROOT/monorepo/redline/.iex.exs"
}

_comoto_cli_command_completion() {
  local valid_args="--help"
  [[ $# -gt 1 ]] && return 1
  COMPREPLY=( $(compgen -W "$valid_args" -- "$1") )
}

_comoto_cli_execute() {
  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_ROOT/lib/render_help; return 0;;
      *) break ;;
    esac
    shift
  done

  subcommand="$1"
  shift

  # TODO get rid of that nvim setting that doesn't un-visualize after indenting
  # TODO add help that says that the filter string can include either the pr or jira number
  # TODO add an echo that warns the user that they're not in the right dir (if that's the case)
  case $subcommand in
    checkin)
      # TODO what happens if this is run when not in monorepo?
      print_and_eval_command "comoto_cli check && git push -f && gst"
      ;;
    checkout|view)
      if [[ $# -ne 1 ]] ; then
        print_usage_error
        exit 1
      fi
      comoto_cli cd monorepo
      echo my arg: $1
      pr_number="$($COMOTO_CLI_LIB/pr search $1)"
      echo PR number: $pr_number
      gh pr $subcommand $pr_number
      [[ $subcommand == checkout ]] && print_confirm 'migrate db?' && comoto_cli migrate -u -l
      ;;
    new)
      _vc_new_branch "$@"
      ;;
    *)
      print_usage_error
      exit 1
      ;;
  esac

}
