#!/bin/bash

. $COMOTO_CLI_LIB/print

_comoto_cli_command_summary='Version Control helpers (git and gh wrappers)'
_comoto_cli_command_usage='comoto_cli bash [OPTIONS] CONTAINER_SHORT_NAME [COMMANDS]'

# TODO DRY this function
usage() {
  echo "Usage: $_comoto_cli_command_usage"
}

_comoto_cli_help() {
  print_help_h2 'Options'
  print_help_li '-h, --help  Print this help and exit'
  print_help_h2 'Subcommands'
  print_help_li 'new'
  print_help_li 'checkout   '
  print_help_li 'view       ?'
  print_help_li 'checkin    If Credo and Dialyzer checks pass, then push'
  print_help_h2 'Examples'
  print_help_ex    "comoto_cli vc checkout 'footer'   # Executes: 'gh pr checkout 1234'"
  print_help_ex    "comoto_cli vc checkout 'JPR-123'"
  echo
  print_help_ex    "# Create and check out new branch 'JPR-123-my-short-description':"
  print_help_ex    "comoto_cli vc new jpr 123 my short   description"
  echo
  echo "Requires that the github CLI ('gh') be installed."
  echo
  echo "The filter string is used to find a PR number."
  echo "Then the corresponding gh command is called."
  echo "It assumes the repo is the monorepo."
  echo
}

# TODO move these to lib?
_vc_ticket_number() {
  local project_prefix="${1^^}"   # all caps
  local issue_number="$2"         # digits
  echo "$project_prefix-$issue_number"
}

# Drop first two args, Capitalize all remaining
_vc_title() {
  shift
  shift
  echo "${@^}"
}

# TODO move these to lib?
_vc_new_branch_text() {
  # TODO call out to _vc_ticket_number
  local project_prefix="$(echo "$1" | tr '[:lower:]' '[:upper:]')"
  shift
  local issue_number="$1"
  shift
  local short_description="$(echo "$*" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"
  echo "$project_prefix-$issue_number-$short_description"
}

_vc_new_branch() {
  # TODO should these be $@ instead?
  local branch_name=$(_vc_new_branch_text $*)
  local ticket_number=$(_vc_ticket_number $*)
  local ticket_title=$(_vc_title $*)
  # TODO this is printing something weird
  # echo "New branch name: '$branch_name'"
  # echo "ticket number: '$ticket_number'"
  # echo "ticket title: '$ticket_title'"

  (
    comoto_cli cd monorepo
    if print_confirm "Create new branch? '$branch_name'" ; then
      git checkout -b $branch_name
      git push --set-upstream origin $branch_name
    fi
    touch temp_file
    git add temp_file
    git commit -m"$ticket_number [temp] delete me"
    # TODO make a better title (i.e. remove the dashes from short desc)
    # TODO add in selections so I can unselect staging and selenium tests
    # TODO this step fails because there needs to be at least one new commit
    # So to make this work I'll need to create a new file, commit it, THEN pick up at this step
     gh pr create --title "$ticket_number $ticket_title" \
       --label "wip" \
       --label "team Hellmann's Deep" \
       --label "create staging" \
       --label "selenium tests"
     git rumif
  )

  echo
  echo "JIRA link:"
  echo -n '`'
  echo -n $ticket_title
  echo -n '` '
  echo "[$ticket_number](https://revzilla.atlassian.net/browse/${ticket_number})"
  echo
  echo
  gh pr view --web
}

add_labels_to_pr() {
  # TODO a healthcheck would include checking that gh is installed.
  # TODO maybe the default labels should be included in ~/.comoto_rc
  gh pr edit --add-label 'wip' --add-label "team Hellmann's Deep" --add-label 'create staging' --add-label 'selenium tests'
}

_comoto_cli_command_completion() {
  local valid_args="checkout view checkin new"
  [[ $# -gt 1 ]] && return 1
  COMPREPLY=( $(compgen -W "$valid_args" -- "$1") )
  # TODO add completion for the subcommands
}

_comoto_cli_execute() {

  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_ROOT/lib/render_help; return 0;;
      *) break ;;
    esac
    shift
  done

  subcommand="$1"
  shift

  # TODO get rid of that nvim setting that doesn't un-visualize after indenting
  # TODO add help that says that the filter string can include either the pr or jira number
  # TODO add an echo that warns the user that they're not in the right dir (if that's the case)
  case $subcommand in
    checkin)
      # TODO what happens if this is run when not in monorepo?
      print_and_eval_command "comoto_cli check && git push -f && gst"
      ;;
    checkout|view)
      if [[ $# -ne 1 ]] ; then
        print_usage_error
        exit 1
      fi
      comoto_cli cd monorepo
      echo my arg: $1
      pr_number="$($COMOTO_CLI_LIB/pr search $1)"
      echo PR number: $pr_number
      gh pr $subcommand $pr_number
      [[ $subcommand == checkout ]] && print_confirm 'migrate db?' && comoto_cli migrate -u -l
      ;;
    new)
      _vc_new_branch "$@"
      ;;
    *)
      print_usage_error
      exit 1
      ;;
  esac

}
