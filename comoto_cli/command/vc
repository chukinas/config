#!/bin/bash

. $COMOTO_CLI_ROOT/lib/print

_comoto_cli_command_summary='Version Control helpers (git and gh wrappers)'
_comoto_cli_command_usage='comoto_cli bash [OPTIONS] CONTAINER_SHORT_NAME [COMMANDS]'

# TODO DRY this function
usage() {
  echo "Usage: $_comoto_cli_command_usage"
}

_comoto_cli_command_help() {
  cat <<EOF

Requires that the github CLI ('gh') be installed!

The filter string is used to find a PR number.
Then the corresponding gh command is called.
It assumes the repo is the monorepo.

Options:
  -h, --help  Print this help and exit

Subcommands:
  view
  checkout
  new
  checkin

Examples:
  comoto_cli vc checkout 'footer'   # Executes: 'gh pr checkout 1234'
  comoto_cli vc checkout 'JPR-123'

  # Create and check out new branch 'JPR-123-my-short-description':
  comoto_cli vc new jpr 123 my short   description

EOF
}

# TODO move these to lib?
_vc_new_branch_text() {
  local project_prefix="$(echo "$1" | tr '[:lower:]' '[:upper:]')"
  shift
  local issue_number="$1"
  shift
  local short_description="$(echo "$*" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"
  echo "$project_prefix-$issue_number-$short_description"
}

_vc_new_branch() {
  local branch_name=$(_vc_new_branch_text $*)
  . $COMOTO_CLI_ROOT/lib/print
  # TODO this is printing something weird
  if print_confirm "Create new branch? '$branch_name'" ; then
    git checkout -b $branch_name
    git push --set-upstream origin $branch_name
    # TODO next steps that could be automated:
    #   create PR
    #   set title (e.g. NERD-2212 Fix Dialyzer Warning)
    #   echo Jira link for each copy-paste into description
    #   Add labels
  fi
}

add_labels_to_pr() {
  # TODO a healthcheck would include checking that gh is installed.
  # TODO maybe the default labels should be included in ~/.comoto_rc
  gh pr edit --add-label 'wip' --add-label "team Hellmann's Deep" --add-label 'create staging' --add-label 'selenium tests'
}

_comoto_cli_command_execute() {

  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_ROOT/lib/render_help; return 0;;
      *) break ;;
    esac
    shift
  done

  subcommand="$1"
  shift

  # TODO get rid of that nvim setting that doesn't un-visualize after indenting
  # TODO add help that says that the filter string can include either the pr or jira number
  # TODO add an echo that warns the user that they're not in the right dir (if that's the case)
  case $subcommand in
    checkin)
      # TODO what happens if this is run when not in monorepo?
      print_and_eval_command "comoto_cli check && git push -f && git latest && gh pr checks --watch --interval"
      ;;
    checkout|view)
      filter_string="$1"
      echo filter string: $filter_string
      if [[ $# -eq 1 && -n $filter_string ]]
      then
        comoto_cli cd monorepo
        # TODO handle better for when multiple results come back
        pr_number="$(gh pr list | grep $filter_string | cut -f1)"
        echo PR number: $pr_number
        gh pr $subcommand $pr_number
      else
        print_usage_error
        exit 1
      fi
      ;;
    new)
      _vc_new_branch "$@"
      ;;
    *)
      print_usage_error
      exit 1
      ;;
  esac

}

_comoto_cli_command_completion() {
  local valid_args="checkout view checkin new"
  [[ $# -gt 1 ]] && return 1
  COMPREPLY=( $(compgen -W "$valid_args" -- "$1") )
  # TODO add completion for the subcommands
}
