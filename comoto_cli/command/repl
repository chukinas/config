#!/bin/bash

. $COMOTO_CLI_LIB/print

# TODO present user with y/n dialog if the node is already in use.
# TODO add a -f option for killing ane existing connections to the node

_comoto_cli_command_summary='Start an Ruby or IEX session in a container'
_comoto_cli_command_usage='comoto_cli repl [OPTIONS] [CONTAINER_SHORT_NAME]'

_comoto_cli_help() {
  cat <<EOF

Options:
  -h, --help  Print this help and exit

Container Short Names:
  ecom        (ruby) Ecom
  cg          (IEx)  Cycle Gear
  jp          (IEx)  J&P Cycles
  rz          (IEx)  RevZilla

EOF
# TODO what's the actual name of the ruby repl?

  echo
  print_help_h2 'Examples'
  print_help_ex "comoto_cli repl rz   # open iex session against local RevZilla container"
  echo
}

_comoto_cli_command_completion() {
  local valid_args="cg jp rz ecom"
  [[ $# -gt 1 ]] && return 1
  COMPREPLY=( $(compgen -W "$valid_args" -- "$1") )
}

# TODO error out when given an invalid $1
_comoto_cli_execute() {
  the_env='dev'

  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_LIB/render_help; return 0;;
      -d) the_env='dev';;
      -s) the_env='staging';;
      *) break ;;
    esac
    shift
  done

  case $the_env in
    dev)
      case $1 in
        # TODO is this correct or should this be in the "bash" command?
        ecom) subcommand="ecom-bash" ;;
        cg|jp|rz) subcommand="$1-iex" ;;
        *) print_usage_error && exit 1
      esac
      ;;
    staging)
      subcommand="kube-iex $($COMOTO_CLI_LIB/container_name)"
      ;;
  esac

  print_and_eval_command --include-type "$subcommand"
}
