#!/bin/bash

. $COMOTO_CLI_ROOT/lib/ansi_color

# TODO move this to a lib file
_help_header() {
  text=$(echo $1 | tr '[:lower:]' '[:upper:]' )
  echo -e "${boldon}${text}:${reset}"
}

# TODO move this to a lib file
_indent_print() {
  echo -e "  $*"
}

# TODO follow this strategy in other commands
_comoto_cli_command_help() {
  local comoto_project_root=${COMOTO_PROJECT_ROOT:-"${redf}\$COMOTO_PROJECT_ROOT${reset}"}
  # TODO this should be added to a "checkhealth function"
  if [[ -d $COMOTO_PROJECT_ROOT ]] ; then
    local your_project_root_msg="${greenf}${boldon}SUCCESS:${boldoff} \$COMOTO_PROJECT_ROOT is set to $COMOTO_PROJECT_ROOT${reset}"
  else
    local your_project_root_msg="${redf}${boldon}ERROR:${boldoff} \$COMOTO_PROJECT_ROOT is not set to a valid directory.${reset}"
  fi

  echo
  echo 'Generate fully-qualified paths to common projects'
  echo
  _help_header 'Usage'
  _indent_print "comoto_cli path [OPTIONS] PATH_SHORT_NAME"
  echo
  _help_header 'Prerequisite'
  _indent_print '$COMOTO_PROJECT_ROOT environment variable points to directory containing the monorepo.'
  _indent_print $your_project_root_msg
  echo
  _help_header 'Options'
  _indent_print '-h, --help  Print this help and exit'
  echo
  _help_header 'Path Short Names'
  _indent_print "comoto      $comoto_project_root"
  _indent_print "monorepo    $comoto_project_root/monorepo"
  _indent_print "ecom        $comoto_project_root/monorepo/ecom"
  _indent_print "redline     $comoto_project_root/monorepo/redline"
  _indent_print "zla         $comoto_project_root/monorepo/zlaverse/dev"
  echo
  _help_header 'Examples'
  _indent_print "comoto_cli path ecom   # echos out '$(comoto_cli path ecom)'"
  echo
}

# TODO implement a way to add another argument to drill down into the main dir

# HELPERS FOR PRINTING OUTPUT TO USER
#######################################

local valid_args="comoto monorepo ecom redline zla"

_usage() {
  msg="Usage: $current_command <comoto|monorepo|ecom|redline|zla>"
  if [[ $1 == -e && -n $2 ]] ; then
    actual_cmd="comoto_cli path $2"
    echo -e "${msg}\n${actual_cmd}" >&2
  else
    echo $msg
  fi
}

# TODO should I retool this to set a $COMOTO_CLI_CUR_PATH ?
# TODO should `cd` depend on this?
# TODO rename _comoto_cli_path_execute
_comoto_cli_command_execute() {
  if [[ $1 =~ ^(-h|--help)$ ]] ; then
    _comoto_cli_command_help
    return 0
  fi

  local current_command="comoto_cli path"
  local where_to=$1

  # TODO now that this is a function, these out functions are exposed...
  # TODO decouple this from my personal config script
  . $COMOTO_CLI_ROOT/lib/print "$current_command"

  if [[ $# -ne 1 ]]; then
    print_info "$usage" >&2
    return 1
  fi

  case "$where_to" in
    comoto)   target="$COMOTO_PROJECTS_DIR";;
    monorepo) target="$COMOTO_PROJECTS_DIR/monorepo";;
    ecom)     target="$COMOTO_PROJECTS_DIR/monorepo/ecom";;
    redline)  target="$COMOTO_PROJECTS_DIR/monorepo/redline";;
    zla)      target="$COMOTO_PROJECTS_DIR/monorepo/zlaverse/dev";;
    *)
      _usage -e "$@"
      return 1
  esac

  echo "$target"
}

_comoto_cli_command_completion() {
  [[ $# -gt 1 ]] && return 1
  COMPREPLY=( $(compgen -W "$valid_args" -- "$1") )
}
