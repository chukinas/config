#!/bin/bash

. $COMOTO_CLI_LIB/print
# TODO needed?
. $COMOTO_CLI_ZLA_BASH_FUNCTIONS

_comoto_cli_command_summary='Bash into a shell of local container or k8s pod'
_comoto_cli_command_usage='comoto_cli bash [OPTIONS] CONTAINER_SHORT_NAME [COMMANDS]'

_comoto_cli_help() {
  print_help_h2 Options
  print_help_li '-h, --help         Print this help and exit'
  print_help_li '-X, --no-execute   Echo the command to stoud; do not execute'
  print_help_li '-s, --staging      Bash into staging cluster via kubernetes'
  print_help_li '--pr=PR_NUMBER     Bash into PR-specific staging cluster'
  print_help_li "--current-pr       Bash into current PR\'s staging cluster"
  print_help_h2 Container Short Names
  print_help_li 'ecom               The Ruby Ecom/Admin app'
  print_help_li 'cg                 Cycle Gear webapp'
  print_help_li 'jp                 J&P Cycles webapp'
  print_help_li 'rz                 RevZilla   webapp'
  print_help_h2 Examples
  print_help_ex 'comoto_cli bash rz             # Bash into local RevZilla container. Local session.'
  print_help_ex "comoto_cli bash cg whoami      # echos 'deploy' then exits"
  print_help_ex "comoto_cli bash --staging    rz   # Bash into revzilla webapp staging pod"
  print_help_ex "comoto_cli bash --pr 1234    rz   # Bash into revzilla webapp staging pod for PR 1234"
  print_help_ex "comoto_cli bash --current-pr rz   # Bash into revzilla webapp staging pod for PR 1234"
  print_help_ex "comoto_cli bash                   # Bash into current repo"
  echo
}

# bash into local container
# arg 1: docker username
# arg 2: docker container name
# arg 3 (optional): command to be executed in non-interactive shell
_local_bash() {

  docker_username="$1"
  docker_container_name="$2"
  shift 2

  local bash_arg
  if [[ -z $1 ]] ; then
    # No args -> Interactive shell
    bash_arg="TERM=xterm-color bash -l"
  else
    # Args -> execute in non-Interactive shell
    bash_arg="$@"
  fi
  print_and_eval_command "docker exec -ti -u $docker_username $docker_container_name bash -lc '$bash_arg'"
}

# arg 1: short name e.g. rz
_container_name_from_short_name() {
  case $1 in
    ecom       ) echo "$ZV_ECOM";;
    cg         ) echo "$ZV_CG"  ;;
    jp         ) echo "$ZV_JP"  ;;
    rz         ) echo "$ZV_RZ"  ;;
    *          ) print_usage_error && return 1
  esac
  return 0
}

_comoto_cli_command_completion() {
  local cur_arg="${COMP_WORDS[2]}"
  case $COMP_CWORD in
    2)
      COMPREPLY=( $(compgen -W "ecom cg jp rz" -- "$cur_arg") )
      ;;
    *) ;;
  esac
}

_comoto_cli_execute() {
  local print_only='false'
  local env='dev'

  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_LIB/render_help; return 0 ;;
      -X|--no-execute)
        print_only='true'
        ;;
      -s|--staging)
        env='staging'
        ;;
      --pr)
        env='staging'
        local pr_number="$2"
        shift
        ;;
      --current-pr)
        env='staging'
        local pr_number="$($COMOTO_CLI_LIB/pr current)"
        echo "current pr: $pr_number"
        ;;
      *) break ;;
    esac
    shift
  done

  if container_name=$(_container_name_from_short_name $1) ; then
    container_user=deploy
    container_short_name="$1"
    shift
  elif repo_profile=$($COMOTO_CLI_LIB/recurse_up_find_file . comoto_cli_repo_profile) ; then
    . $repo_profile
    # TODO handle for missing vars
    container_user=$comoto_cli_repo_docker_user
    container_name=$comoto_cli_repo_docker_container
  else
    return 1
  fi

  local non_interactive_command="$@"

  case $env in
    dev)
      _local_bash "$container_user" "$container_name" "$non_interactive_command"
      ;;
    staging)
      if [[ -z $container_short_name ]] ; then
        print_usage_error
        return 1
      elif [[ -n $pr_number ]] ; then
        pr_number_option="--pr '$pr_number'"
      fi
      print_and_eval_command "$COMOTO_CLI_LIB/kube bash $pr_number_option '$container_short_name' $non_interactive_command"
      ;;
  esac

}
