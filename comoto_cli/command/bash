#!/bin/bash

_comoto_cli_command_summary='Bash into a shell of local container or k8s pod'
_comoto_cli_command_usage='comoto_cli bash [OPTIONS] CONTAINER_SHORT_NAME [COMMANDS]'

. $COMOTO_CLI_ROOT/lib/print
. $COMOTO_PROJECT_ROOT/monorepo/zlaverse/support/bash_functions.sh

_comoto_cli_command_help() {
  print_help_h2 Options
  print_help_li '-h, --help         Print this help and exit'
  print_help_li '-X, --no-execute   Echo the command to stoud; do not execute'
  print_help_li '-s, --staging      Bash into staging cluster via kubernetes'
  print_help_li '--pr=PR_NUMBER     Bash into PR-specific staging cluster'
  print_help_li "--current-pr       Bash into current PR\'s staging cluster"
  print_help_h2 Container Short Names
  print_help_li 'ecom               The Ruby Ecom/Admin app'
  print_help_li 'cg                 Cycle Gear webapp'
  print_help_li 'jp                 J&P Cycles webapp'
  print_help_li 'rz                 RevZilla   webapp'
  print_help_h2 Examples
  print_help_li 'comoto_cli bash rz             # Bash into local RevZilla container. Local session.'
  print_help_li "comoto_cli bash cg whoami      # echos 'deploy' then exits"
  print_help_li "comoto_cli bash --staging    rz   # Bash into revzilla webapp staging pod"
  print_help_li "comoto_cli bash --pr 1234    rz   # Bash into revzilla webapp staging pod for PR 1234"
  print_help_li "comoto_cli bash --current-pr rz   # Bash into revzilla webapp staging pod for PR 1234"
  echo
}

# bash into local container
# arg 1: container short name
# arg 2 (optional) command to be executed in non-interactive shell
_comoto_cli_bash_local() {
  local container_name
  case $1 in
    ecom       ) container_name=$ZV_ECOM;;
    cg         ) container_name=$ZV_CG  ;;
    jp         ) container_name=$ZV_JP  ;;
    rz         ) container_name=$ZV_RZ  ;;
    *          ) print_usage_error && return 1
  esac
  shift

  # If commands were passed, run execute them in the container,
  # otherwise enter an interactive shell.
  local bash_arg
  if [[ -z $1 ]] ; then
    # No args -> Interactive shell
    bash_arg="TERM=xterm-color bash -l"
  else
    # Args -> execute in non-Interactive shell
    bash_arg="$@"
  fi

  print_and_eval_command "docker exec -ti -u deploy $container_name bash -lc '$bash_arg'"
}

_comoto_cli_command_completion() {
  local cur_arg="${COMP_WORDS[2]}"
  case $COMP_CWORD in
    2)
      COMPREPLY=( $(compgen -W "ecom cg jp rz" -- "$cur_arg") )
      ;;
    *) ;;
  esac
}

_comoto_cli_command_execute() {
  local print_only='false'
  local env='dev'

  while :; do
    case "${1-}" in
      -X|--no-execute)
        print_only='true'
        ;;
      -s|--staging)
        env='staging'
        ;;
      --pr)
        env='staging'
        local pr_number="$2"
        shift
        ;;
      --current-pr)
        env='staging'
        local pr_number="$($COMOTO_CLI_ROOT/lib/pr current)"
        echo "current pr: $pr_number"
        ;;
      *) break ;;
    esac
    shift
  done

  # Get the container identifier
  local container_short_name="$1"
  shift
  local non_interactive_command="$@"

  case $env in
    dev)
      _comoto_cli_bash_local "$container_short_name" "$non_interactive_command"
      ;;
    staging)
      if [[ -n $pr_number ]] ; then
        print_and_eval_command "$COMOTO_CLI_ROOT/lib/kube bash --pr '$pr_number' '$container_short_name' $non_interactive_command"
      else
        $COMOTO_CLI_ROOT/lib/kube bash "$container_short_name" "$non_interactive_command"
      fi
      ;;
  esac

}
