#!/bin/bash

. $COMOTO_CLI_LIB/print

_comoto_cli_command_summary='Initial setup of a local database and migration helpers'
_comoto_cli_command_usage='comoto_cli db [OPTIONS] SETUP_COMMAND'

_comoto_cli_help() {
  # TODO reimplement
  cat <<EOF

Options:
  -h, --help      Print this help and exit

Setup commands:
  setup       Download a sanitized db
  restore     Restore (?)
  reindex     Reindex (?)
  privileges  Elevate your user account privileges.
              Returns you the code to paste into datagrip
  pw          Password for connecting to db in DataGrip
EOF
# TODO should the migrations come under a subcommand?
# TODO and all the various setup stuff under a 'setup' subcommand?

  print_help_h2 Examples
  print_help_ex "comoto_cli db setup"
  print_help_ex "comoto_cli db restore"
  print_help_ex "comoto_cli db reindex"
  print_help_ex "comoto_cli db privileges   # generates SQL code you can paste into datagrip"
  echo
}


# TODO `local command` instead?
commands=""

# TODO move this dir into comoto_cli
dumps_dir="$COMOTO_PROJECT_ROOT/.db-dumps"

# TODO move this into a subcommand called `dump`
# TODO I'll define functions like
#  - is_dumps_dir empty
#  - get_latest_dump
#  - check_health
#  - restore
#  - delete
_get_local_sanitized_db() {

  # SETUP DUMPS DIR
  # TODO should probably ask to delete any existing dumps
  # That's nice. Then there's only ever one dump in there at a time
  # TODO move this into the initial bashrc for comoto_cli so we don't have to make this check each and every time
  print_and_eval_command "mkdir -p $dumps_dir"

  # SELECT DUMP
  # TODO allow the user to select the dump they want to use
  most_recent_dump=$(gsutil ls 'gs://rz-db-dumps/ecom*' \
    | sort -r `# most recent one first` \
    | head -1)
  echo most_recent_dump: $most_recent_dump
  selected_dump=$most_recent_dump

  # COPY DUMP
  # TODO warn the user that this is going to take a while (perhaps one or a few hours). Does (s)he want to proceed?
  # TODO this print_and_eval_command should prefix with command name
  # TODO ensure that the other commands do the same
  print_and_eval_command "gsutil cp $selected_dump $dumps_dir"

  exit 0
}

# TODO THIS doesn't work ... until I up my containers ... is this true?
_restore_db_from_dump() {
  dump_name=$(ls $dumps_dir)
  if [[ $(ls $dumps_dir | wc -l) -eq 1 ]]
  then
    echo 'TODO: ask user to proceed since this is going to take a looong time'
    # TODO note: this fill hang for a long time at "Removing obsolete dictionary files". THis is ok.
    # TODO in another window, run: `df -h` to monitor the `/dev/mapper/data-root`
    print_and_eval_command "postgres-dump-restore $dumps_dir/$dump_name"
    # TODO remove the backup
    # TODO part of the health check should be checking to make sure there are no dumps left
    exit 0
  else
    # TODO improve error msg
    echo "Error: there must be exactly one db dump in $dumps_dir. Run the setup cmd"
    exit 1
  fi
}

_comoto_cli_db_actions=()

_comoto_cli_db_parse_args() {
  if [[ $# -eq 1 && $1 =~ ^(setup|restore|reindex)$ ]] ; then
    _comoto_cli_db_actions+=("$1")
    return 0
  fi
}

_comoto_cli_add_user_accounts() {
  local email_address='jonathan.chukinas@revzilla.com'
  if ! print_confirm "Is this your account address: $email_address?" ; then
    echo exiting >&2
    return 1
  fi
  if ! print_confirm "You must have created used accounts before executing. Have you?" ; then
    echo exiting >&2
    return 1
  fi
  echo
  echo "-- Make yourself an admin"
  echo "UPDATE users SET role_id = 2 WHERE email_address = '$email_address';"
  for site_id in 1 4 16
  do
    echo
    echo "-- give yourself permissions for site $site_id"
    echo "INSERT INTO user_permission_sections (user_id, permission_section_id, site_id)"
    echo "  SELECT (SELECT id FROM users WHERE email_address = '$email_address' and site_id = $site_id), ps.id, $site_id"
    echo "  FROM permission_sections ps;"
  done
  echo
}

_comoto_cli_command_completion() {
  local cur_word="${COMP_WORDS[$COMP_CWORD]}"
  COMPREPLY=( $(compgen -W "privileges setup restore reindex pw" -- "$cur_word"))
}

_comoto_cli_execute() {

  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_ROOT/lib/render_help; return 0;;
      *) break ;;
    esac
    shift
  done

  if [[ $# -eq 1 ]] ; then
    case $1 in
      privileges)
        _comoto_cli_add_user_accounts
        return 0
        ;;
      pw)
        echo
        echo "copy and paste this password into datagrip:"
        echo
        gcloud auth print-access-token
        echo
        return 0
        ;;
    esac
  fi

  _comoto_cli_db_parse_args "$*"

  for action in "${_comoto_cli_db_actions[@]}"
  do
    echo $action
    case $action in
      setup)    _get_local_sanitized_db ;;
      restore)  _restore_db_from_dump ;;
      reindex)  cg-product-catalog-reindex ;;
    esac
  done
  # TODO break migrations out into subcommand
  print_and_eval_command $commands
}
