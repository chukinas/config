#!/bin/bash

. $COMOTO_CLI_LIB/print

_comoto_cli_command_summary='Initial setup of a local database and migration helpers'
_comoto_cli_command_usage='comoto_cli db [OPTIONS] SETUP_COMMAND'

_comoto_cli_help() {
  cat <<EOF

Options:
  -h, --help      Print this help and exit

Setup commands:
  setup     Download a sanitized db
  restore   Restore (?)
  reindex   Reindex (?)
EOF
# TODO should the migrations come under a subcommand?
# TODO and all the various setup stuff under a 'setup' subcommand?

  echo
  print_help_h2 Examples
  print_help_ex "comoto_cli db setup"
  print_help_ex "comoto_cli db restore"
  print_help_ex "comoto_cli db reindex"
  echo
}


# TODO `local command` instead?
commands=""

# TODO move this dir into comoto_cli
dumps_dir="$COMOTO_PROJECT_ROOT/.db-dumps"

# TODO move this into a subcommand called `dump`
# TODO I'll define functions like
#  - is_dumps_dir empty
#  - get_latest_dump
#  - check_health
#  - restore
#  - delete
_get_local_sanitized_db() {

  # SETUP DUMPS DIR
  # TODO should probably ask to delete any existing dumps
  # That's nice. Then there's only ever one dump in there at a time
  # TODO move this into the initial bashrc for comoto_cli so we don't have to make this check each and every time
  print_and_eval_command "mkdir -p $dumps_dir"

  # SELECT DUMP
  # TODO allow the user to select the dump they want to use
  most_recent_dump=$(gsutil ls 'gs://rz-db-dumps/ecom*' \
    | sort -r `# most recent one first` \
    | head -1)
  echo most_recent_dump: $most_recent_dump
  selected_dump=$most_recent_dump

  # COPY DUMP
  # TODO warn the user that this is going to take a while (perhaps one or a few hours). Does (s)he want to proceed?
  # TODO this print_and_eval_command should prefix with command name
  # TODO ensure that the other commands do the same
  print_and_eval_command "gsutil cp $selected_dump $dumps_dir"

  exit 0
}

# TODO THIS doesn't work ... until I up my containers ... is this true?
_restore_db_from_dump() {
  dump_name=$(ls $dumps_dir)
  if [[ $(ls $dumps_dir | wc -l) -eq 1 ]]
  then
    echo 'TODO: ask user to proceed since this is going to take a looong time'
    # TODO note: this fill hang for a long time at "Removing obsolete dictionary files". THis is ok.
    # TODO in another window, run: `df -h` to monitor the `/dev/mapper/data-root`
    print_and_eval_command "postgres-dump-restore $dumps_dir/$dump_name"
    # TODO remove the backup
    # TODO part of the health check should be checking to make sure there are no dumps left
    exit 0
  else
    # TODO improve error msg
    echo "Error: there must be exactly one db dump in $dumps_dir. Run the setup cmd"
    exit 1
  fi
}

_comoto_cli_db_actions=()

_comoto_cli_db_parse_args() {
  if [[ $# -eq 1 && $1 =~ ^(setup|restore|reindex)$ ]] ; then
    _comoto_cli_db_actions+=("$1")
    return 0
  fi
}

_comoto_cli_execute() {

  while :; do
    case "${1-}" in
      -h|--help) $COMOTO_CLI_ROOT/lib/render_help; return 0;;
      *) break ;;
    esac
    shift
  done

  _comoto_cli_db_parse_args "$*"

  for action in "${_comoto_cli_db_actions[@]}"
  do
    echo $action
    case $action in
      setup) _get_local_sanitized_db ;;
      restore) _restore_db_from_dump ;;
      reindex) cg-product-catalog-reindex ;;
    esac
  done
  # TODO break migrations out into subcommand
  print_and_eval_command $commands
}

_comoto_cli_command_completion() {
  local cur_word="${COMP_WORDS[$COMP_CWORD]}"
  COMPREPLY=( $(compgen -W "setup restore reindex" -- "$cur_word"))
}
