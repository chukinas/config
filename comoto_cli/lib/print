#!/bin/bash

# TODO combine this with $JJC_CONFIG_DIR/lib?
# TODO rename formatter?

# HELPERS FOR PRINTING OUTPUT TO USER
#######################################

. $JJC_CONFIG_DIR/lib/ansi_color

# TODO am i using this anymore?
if [[ -n "$1" ]]; then
  current_command="$1: "
fi

print_info() {
  echo "${current_command}$1"
}

print_header() {
  echo ; print_info "$1"
}

# Expects one argument string, e.g. "Are you sure you want to proceed?"
# Usually used in an if statement, like:
# if print_confirm 'Are you sure you want to proceed?' ; then
#   do_something
# else
#   do_something_else
# fi
print_confirm() {
  while true; do
    read -p "$1 [Y/n] " yn
    case $yn in
        [Yy]* ) return 0;;
        [Nn]* ) return 1;;
        * ) echo "Please answer yes or no.";;
    esac
  done
}

print_and_eval_command() {
  local include_type  confirm   cmd

  for arg in "$@"
  do
    case $arg in
      "--include-type") include_type='true' ;;
      "-c"            ) confirm='true'      ;;
      "--confirm"     ) confirm='true'      ;;
      "-C"            ) confirm='false'      ;;
      *               ) cmd="$arg"; break;;
    esac
  done

  if [[ -n $cmd ]] ; then
    echo
    echo -e "${boldon}COMOTO CLI${boldoff} executing..."
    echo
    echo -e "\t$cmd"
    echo
  else
    echo 'TODO whoops!' >&2
    return 1
  fi

  # TODO why the odd amount of white space
  if [[ $include_type == 'true' ]] ; then
    echo -e "$(type $cmd 2> /dev/null)"
    echo
  fi

  if [[ $confirm == 'true' ]] ; then
    if print_confirm 'Proceed?' ; then
      echo
      eval $cmd
    else
      echo
    fi
  else
    eval $cmd
  fi
}

print_usage_error() {
  echo "Usage: $_comoto_cli_command_usage" >&2
}

#################################################
# PRINT HELPERS FOR GENERATING HELP DOCUMENTATION
#################################################

print_help_h1() {
  echo
  echo -e "$@"
}

print_help_h2() {
  text=$(echo "$@" | tr '[:lower:]' '[:upper:]' )
  echo
  echo -e "${boldon}${text}:${reset}"
}

print_help_li() {
  # TODO should this be `$@` ?
  echo -e "  $*"
}

print_help_ex() {
  # TODO should this be `$@` ?
  echo -e "  \$ $*"
}
