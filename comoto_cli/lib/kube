#!/bin/bash

# https://revzilla.atlassian.net/wiki/spaces/TECH/pages/338919566/Kubernetes+and+Google+Cloud+-+Getting+Started
#
# view all functions that aren't help functions
# cat bash_functions.sh | grep ^function | sed 's/function //' | sed 's/(.*//' | grep -v ^_.*help$

. $COMOTO_PROJECT_ROOT/monorepo/zlaverse/support/bash_functions.sh
. $COMOTO_CLI_ROOT/lib/print

_kubepodlist="$COMOTO_CLI_ROOT/.store/kubepodlist"

_comoto_cli_kube_setup() {

  # Get the required auth plugin
  # gke-gcloud-auth-plugin is needed to use -c
  # https://cloud.google.com/blog/products/containers-kubernetes/kubectl-auth-changes-in-gke
  # This was the initial recommendation of gcloud:
  # print_and_eval_command "gcloud components install gke-gcloud-auth-plugin"
  # didn't work, so using this (also recommended by the article, and also called out in the cli error):
  print_and_eval_command "sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin"

  # Log in
  print_and_eval_command "gcloud auth login"
  # TODO is there a way to check to see if we're already logged in?

  # Get cluster credentials
  print_and_eval_command "gcloud container clusters get-credentials $(gcloud container clusters list --project revzilla-staging --format 'value(NAME)') --region us-central1 --project revzilla-staging"

  # Give the staging cluster a convenient name ('staging')
  # Before making this script public, add some smarts for making sure this hasn't already been done.
  # Maybe check that a 'staging'-named cluster already exists?
  print_and_eval_command "kubectl config get-contexts"
  context_name="$(kubectl config get-contexts --output name)"
  echo
  echo "Current context name: $context_name"
  echo "Renaming '$context_name' to 'staging':"
  print_and_eval_command "kubectl config rename-context $context_name staging"
  echo
  echo "Verify that the name of the context is 'staging':"
  print_and_eval_command "kubectl config get-contexts"

  # View the staging pods in all their glory
  kubectl get pods
}

_comoto_cli_kube_generatepodlist() {
  rm $_kubepodlist
  local tempstore="${_kubepodlist}temp"
  kubectl get pods --output name > "$tempstore"
  sed 's/pod\///' $tempstore > $_kubepodlist
  rm $tempstore
}

# USAGE
#   $0 bash [--pr PR_NUMBER] CONTAINER_ABBREV

# MAIN SCRIPT
#######################################

# For now, there's only one available command, 'bash'.
# More will be added later, but for now all we have to do is check for that arg
if [[ $1 != 'bash' ]] ; then
  exit 1
fi
shift

if [[ $1 == '--pr' ]] ; then
  shift
  kube_bash_pr_arg="pr-$1"
  shift
fi

case $1 in
  # TODO DRY this out?
  ecom) container_name='ecom-webapp';;
  cg) container_name='cycle-gear-redline-webapp';;
  jp) container_name='jp-cycles-redline-webapp';;
  rz) container_name='revzilla-redline-webapp';;
  *) echo "Error! You must pass a valid container name. Got: '$1'" >&2; exit 1
esac
shift

print_and_eval_command --include-type "kube-bash $container_name $kube_bash_pr_arg"
