#!/bin/bash

. $COMOTO_CLI_DIR/moto_helpers

commands=""

_add_rake_task() {
  cmd="rake db:migrate:$1"
  if [[ ! $commands = "" ]] ; then
    commands="$commands && "
  fi
  commands="$commands$cmd"
}

[[ ! -d $COMOTO_PROJECTS_DIR ]] && echo '$COMOTO_DIR is not set. Make sure your ~/.bashrc sets that environment variable. Exiting.' >&2 && exit 1
dumps_dir="$COMOTO_PROJECTS_DIR/.db-dumps"

# TODO move this into a subcommand called `dump`
# TODO I'll define functions like
#  - is_dumps_dir empty
#  - get_latest_dump
#  - check_health
#  - restore
#  - delete
_get_local_sanitized_db() {

  # SETUP DUMPS DIR
  # TODO should probably ask to delete any existing dumps
  # That's nice. Then there's only ever one dump in there at a time
  # TODO move this into the initial bashrc for comoto_cli so we don't have to make this check each and every time
  print_and_eval_command "mkdir -p $dumps_dir"

  # SELECT DUMP
  # TODO allow the user to select the dump they want to use
  most_recent_dump=$(gsutil ls 'gs://rz-db-dumps/ecom*' \
    | sort -r `# most recent one first` \
    | head -1)
  echo most_recent_dump: $most_recent_dump
  selected_dump=$most_recent_dump

  # COPY DUMP
  # TODO warn the user that this is going to take a while (perhaps one or a few hours). Does (s)he want to proceed?
  # TODO this print_and_eval_command should prefix with command name
  # TODO ensure that the other commands do the same
  print_and_eval_command "gsutil cp $selected_dump $dumps_dir"

  exit 0
}

# TODO THIS doesn't work ... until I up my containers ... is this true?
_restore_db_from_dump() {
  dump_name=$(ls $dumps_dir)
  if [[ $(ls $dumps_dir | wc -l) -eq 1 ]]
  then
    echo 'TODO: ask user to proceed since this is going to take a looong time'
    # TODO note: this fill hang for a long time at "Removing obsolete dictionary files". THis is ok.
    # TODO in another window, run: `df -h` to monitor the `/dev/mapper/data-root`
    print_and_eval_command "postgres-dump-restore $dumps_dir/$dump_name"
    # TODO remove the backup
    # TODO part of the health check should be checking to make sure there are no dumps left
    exit 0
  else
    # TODO improve error msg
    echo "Error: there must be exactly one db dump in $dumps_dir. Run the setup cmd"
    exit 1
  fi
}

if [[ $1 = setup ]]
then
  _get_local_sanitized_db
elif [[ $1 = restore ]]
then
  _restore_db_from_dump
elif [[ $1 = reindex ]]
then
  cg-product-catalog-reindex
else
  while getopts "dlu" opt; do
    case $opt in
      d) _add_rake_task "down" ;;
      l) _add_rake_task "lock" ;;
      u) _add_rake_task "up" ;;
      *) echo "$0: usage: <<insert usage here>>" >&2; exit 1
    esac
  done
fi

print_and_eval_command --include-type "ecom-bash '$commands'"
