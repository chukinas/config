"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TEMP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

:command BikeReplace Subvert/bike{,s}/vehicle{,s} | normal n
:command MotorcycleReplace Subvert/motorcycle{,s}/vehicle{,s} | normal n


" TODO make note of the fact that the standard apt(-get) vim doesn't some
" installed with all the options. Somewhere (maybe in the readme) I've noted
" where I got the one for my lemur pro. Or.... If I go with neovim, maybe I
" don't need to worry about that after all
" TODO switch to neovim (I think I need to connect the rc file)
" TODO there is some vim stuff in the bashrc. Review
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETUP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" DOTFILES
" 1. My bash script takes care of setting the VIMCONFIG env var.
" 2. Create a ~/.vim dir
" 3. In that folder, soft-link to this file 

" FZF
" 1. Install fd (https://github.com/sharkdp/fd#on-ubuntu), an alternative to the basic
"    `find` command. It respects .gitignore. There are notes about how to
"    integrate it with fzf (https://github.com/sharkdp/fd#using-fd-with-fzf).
"    Ensure that `fd` maps to `fdfind`, which is the actual binary name
" 2. Create fd softlink `ln -s $(which fdfind) ~/.local/bin/fd`
" 2. Install the command line tool FZF (https://github.com/junegunn/fzf#installation)
"    I followed the instructions for cloning the git repo and executing the
"    install script. This did nice things like ask me if I wanted to install
"    keyboard commands and add lines to .bashrc
"    # TODO check to see if that bashrc line is already in my rc
" 1. Following the instructions at ~/monorepo/zlaverse/dev, install fzf to OS
" Note, FZF has uninstall scripts

" TODO: set up personal laptop with neovim, which is what my msi now runs

" 1. Clone dotfiles repo
" 2. Create symlink: `ln -s ~/projects/dotfiles/dotfile/.vim/ ~/.vim
" 3. Install minpac (https://github.com/k-takata/minpac)
" 4. Install VIM (how to get the " register to work?) TODO See my readme
" 5. Node must be installed in order for coc.nvim to work (see https://github.com/neoclide/coc.nvim)
" 6. Open Vim, run :PackUpdate in install packages

" TODO automatically load vimrc after saving this file
" TODO check all this config stuff back into github
" TODO rename my dotfiles project to config. or setup?
"
" Why do only certain clipboard items work with the + registry?

" ACK
" TODO move this to top level readme?
" 1. install via apt
"
" NEOVIM
" See pg6 of Modern Vim.
" Create that init.vim file
" TODO synlink that file and put master in my dotfiles project
" I've moved the file to dotfiles and created the symlink
"
" COC
" 1. Follow ASDF instructions; install matching versions of erlang/elixir
" 2. In vim,
"    `:PackUpdate`
"    `:CocInstall coc-elixir coc-...`

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Sets how many lines of history VIM has to remember
set history=500

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
autocmd FocusGained,BufEnter * checktime

set nocompatible

let mapleader = "\<space>"
" TODO I commented this out to see if I could get <C-\> working
" let maplocalleader = "\\"

noremap <leader>v :e~/.vim/vimrc<cr>
noremap <leader>b :edit~/.bashrc<cr>

" automatically source this vimrc on save
" https://tech.serhatteker.com/post/2020-04/auto-source-vimrc-when-saved/
" TODO fix magic string
autocmd! BufWritePost ~/.vim/vimrc source ~/.vim/vimrc | echom "Reloaded VIMRC"
"autocmd! BufWritePost $MYVIMRC source $MYVIMRC | echom "Reloaded $NVIMRC"


" Make the colon easier to type in normal mode
nnoremap ; :
nnoremap : ;

set path+=app**

" Make it easier to copy/paste from clipboard register
nnoremap <leader>y "+y
nnoremap <leader>p "+p

" Make it easier to access command history
nnoremap <leader>q q:

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Note: some of my minpac plugins are defined further below.
" Examgle: Ack-Vim is imported in the Search section below.
packadd minpac
call minpac#init()

" FZF (Fuzzy Finder)
call minpac#add('junegunn/fzf')
nnoremap <leader>f :FZF<CR>

" Conquer of Completion
call minpac#add('neoclide/coc.nvim', {'branch': 'release'} )
hi Pmenu ctermbg=LightGray
nnoremap <leader>d :CocDiagnostics<cr>
nmap gd <Plug>(coc-definition)
"Type definitions not yet supported by ElixirLS
"nmap gy <Plug>(coc-type-definition)
nmap gi <Plug>(coc-implementation)
nmap gr <Plug>(coc-references)
" From https://github.com/neoclide/coc.nvim#example-vim-configuration
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" Highlight the symbol and its references when holding the cursor.
" TODO doesn't seem to work...
autocmd CursorHold * silent call CocActionAsync('highlight')
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Projectionist
call minpac#add('tpope/vim-projectionist')
nnoremap <leader>a :A<CR>

call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-repeat')
call minpac#add('sheerun/vim-polyglot')
call minpac#add('tpope/vim-rhubarb')
call minpac#add('neovim/nvim-lspconfig')
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Search
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" :ACK is one of my main search tools.
" See my .ackrc for tips on using it on command line.
" Most of this options can be used in Ack-vim as well.
"
" TODO see instructions above
" Be sure to symlink ~/.ackrc to my dotfile
" ~/projects/dotfiles/dotfile/.ackrc
" TODO isn't there a way for vim to open a file from a path like the one
" above?
call minpac#add('mileszs/ack.vim')
nmap <leader>s :Ack 

" VIM ABOLISH
" https://github.com/tpope/vim-abolish#substitution
" Example:
" :Subvert/bike{,s}/vehicle{,s}
call minpac#add('tpope/vim-abolish')

" For regular expressions turn magic on
set magic

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Here are the steps to do a multi-file search and replace
" (from Practical Vim, p.239)
" /Pragmatic\ze Vim
" :vimgrep // **/*.txt
" :cfdo %s//Practical/gc
" :cfdo update

" :cn goes to the next result
" See the quickfix window
" https://thevaluable.dev/vim-search-find-replace/
" https://blog.jasonmeridth.com/posts/use-git-grep-to-replace-strings-in-files-in-your-git-repository/
" https://superuser.com/questions/400078/how-can-i-search-a-file-by-its-name-and-partial-path

" Search for visually selected text
" https://vim.fandom.com/wiki/Search_for_visually_selected_text
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VISUAL
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" Enable syntax highlighting
syntax enable 

" Always show the status line
set laststatus=2

set cmdheight=2

" Show line numbers
set number

" Always show current position
set ruler

" Highlight (with an underline) the current line in each window
" set cursorline

" Dim status line of inactive windows
highlight StatusLine cterm=bold ctermfg=Black ctermbg=Cyan
highlight StatusLineNC ctermfg=DarkGray ctermbg=White
highlight VertSplit ctermfg=DarkGray ctermbg=Black

" Always keep some lines between cursor and top/bottom of window
set scrolloff=10

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FOLDING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" to bold the text, add cterm=bold
highlight Folded ctermfg=LightGray ctermbg=DarkMagenta
highlight FoldColumn ctermfg=LightGray ctermbg=DarkMagenta
function ExFoldExpr(lnum)
if IsAlias(a:lnum)
  return IsLineBlank(a:lnum + 1)?'<1':1
elseif (IsSectionLine(a:lnum) || IsSectionLine(a:lnum + 1))
  return 0
"elseif IsOnelineFunction(a:lnum)
"  return 1
elseif IsSectionTitle(a:lnum)
  return 1
elseif IsSectionEnd(a:lnum)
  return '<1'
elseif HasDef(a:lnum)
"elseif IsFunctionStartLine(a:lnum)
  return 2
elseif IsFoldEnd(a:lnum)
  return '<2'
else
  return -1
endif
endfunction

function IsAlias(lnum)
return getline(a:lnum)=~'\v^alias'
endfunction

function IsFunctionStartLine(lnum)
return getline(a:lnum)=~'\v^\s*defp?>.*do\s*$'
endfunction

function HasDef(lnum)
return getline(a:lnum)=~'\v^ {2}def'
endfunction

function IsFoldEnd(lnum)
return (IsEnd(a:lnum) && !IsLineBlank(a:lnum + 1)) ||
     \ (IsEnd(a:lnum - 1) && IsLineBlank(a:lnum)) ||
     \ (IsOnelineFunction(a:lnum - 1) && IsLineBlank(a:lnum))
endfunction

function IsEnd(lnum)
return getline(a:lnum)=~'\v^ {2}end\s*$'
endfunction

function IsLineBlank(lnum)
return getline(a:lnum)=~'\v^\s*$'
endfunction

function IsSectionLine(lnum)
return getline(a:lnum)=~'\v^  # \*{3} \**\s*$'
endfunction

function IsSectionTitle(lnum)
return getline(a:lnum)=~'\v^  # \*{3} \u'
endfunction

function IsSectionEnd(lnum)
return IsSectionLine(a:lnum + 2) || IsLineBeforeLastEnd(a:lnum)
endfunction

function IsModuleEnd(lnum)
return getline(a:lnum)=~'\v^end\s*$'
endfunction

function IsLineBeforeLastEnd(lnum)
return IsModuleEnd(a:lnum + 1)
endfunction

function IsOnelineFunction(lnum)
return getline(a:lnum)=~'\v^\s*defp?>.*do\:'
endfunction


augroup folds
autocmd!
autocmd InsertEnter * let w:oldfdm = &l:foldmethod | setlocal foldmethod=manual
autocmd InsertLeave *
        \ if exists('w:oldfdm') |
        \   let &l:foldmethod = w:oldfdm |
        \   unlet w:oldfdm |
        \ endif |
        \ normal! zv
augroup END

nnoremap <leader>z zMgg<C-o>zozo

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" A buffer becomes hidden when it is abandoned
set hidden

" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile

" Remove trailing whitespace on write
" https://vim.fandom.com/wiki/Remove_unwanted_spaces
autocmd BufWritePre *.exs,*.ex,*.html,*.md %s/\s\+$//e

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Make it easier to move windows around
" Directional window selection is still done via e.g. <C-WH>
nnoremap <C-H>  <C-W>H
nnoremap <C-J>  <C-W>J
nnoremap <C-K>  <C-W>K
nnoremap <C-L>  <C-W>L
"nnoremap <M-H>  <C-W><C-H>
"nnoremap <M-J>  <C-W><C-J>
"nnoremap <M-K>  <C-W><C-K>
"nnoremap <M-L>  <C-W><C-L>
"tnoremap <ESC> <C-\><C-N>

" To change height of window:
" :res(ize) 60     ...  to make it 60 rows high
" :vertical resize 80 ..to make it 80 cols wide
nnoremap <C-W>- :resize -5 <CR>
nnoremap <C-W>+ :resize +5 <CR>
nnoremap <silent> <leader>t <C-W>K :resize 15<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Tab
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab

" Indenting of new lines
set autoindent
set smartindent

" Wrap long lines at wordbreaks
set wrap "Wrap lines
set linebreak
set whichwrap+=<,>,h,l


" TODO move all the elixir stuff out into a separate file
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Elixir mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Shortcut to invalidate tailwind config hash to force reload
"noremap <leader>w :e assets/tailwind.config.js<cr>

augroup myElixir
  au!

  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " NORMAL
  "
  " pry
  " Remember to run tests in iex, example:
  " `iex -S mix test`
  autocmd FileType elixir nnoremap <buffer> <leader>r orequire IEx; IEx.pry()<esc>

  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " ABBREVIATIONS
  "
  " %__MODULE__{} = 
  autocmd FileType elixir :iabbrev <buffer> mod %__MODULE__{} =
  " %{}
  autocmd FileType elixir :iabbrev <buffer> mpp %{}<left>
  " IO.inspect
  autocmd FileType elixir :iabbrev <buffer> insp IO.inspect(label: "")<left><left>
augroup END


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Embedded Elixir
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" `class=""` add then edit
nnoremap <leader>C 0f>i<Space>class=""<ESC>:noh<CR>i

" `class=""` edit
nnoremap <leader>c V/\%Vclass<CR><ESC>:noh<CR>f";i<Space>

" `<% %> add then edit
nnoremap <leader>e O<%<Space>%><ESC>F%;a

" `<%# %> add then edit
nnoremap <leader>3 O<%#<Space>%><ESC>F#a<Space>

" `=""` and drop into INSERT mode
nnoremap <leader>" i=""<ESC>i

" <% ... %>
autocmd FileType eelixir :iabbrev <buffer> %% <% %><left><left><left>
" <%#  %>
autocmd FileType eelixir :iabbrev <buffer> ## <%# %><left><left><left>
" <%= ... %>
autocmd FileType elixir,eelixir :iabbrev <buffer> exp <%= %><left><left><left>
" <%= if ... do %>
autocmd FileType eelixir :iabbrev <buffer> ifdo <%= if do %><left><left><left><left><left><left>
" <% end %>
autocmd FileType eelixir :iabbrev <buffer> ndd <% end %><esc>
" <%= if @live_action == :dev do %>
autocmd FileType eelixir :iabbrev <buffer> dvv <%= if @live_action == :dev do %><!-- <cr> -->

autocmd FileType elixir :set foldmethod=expr
autocmd FileType elixir :set foldexpr=ExFoldExpr(v:lnum)
autocmd FileType elixir :set foldcolumn=3

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Common Abbreviations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This function is useful for dealing with unwanted whitespace
" caused by using the spacebar as the keyword to end abbreviations.
" Put this at the end of the abbeviation:
" <C-R>=Eatchar('\s')<CR>
func Eatchar(pat)
  let c = nr2char(getchar(0))
  return (c =~ a:pat) ? '' : c
endfunc

autocmd FileType * :iabbrev <silent> <buffer> qq ""<left><C-R>=Eatchar('\s')<CR>
autocmd FileType * :iabbrev <silent> <buffer> eqq =""<left><C-R>=Eatchar('\s')<CR>
autocmd FileType * :iabbrev <silent> <buffer> ppp ()<left><C-R>=Eatchar('\s')<CR>
autocmd FileType * :iabbrev <silent> <buffer> pqq ("")<left><left><C-R>=Eatchar('\s')<CR>
autocmd FileType * :iabbrev <silent> <buffer> bbb {}<left><C-R>=Eatchar('\s')<CR>
