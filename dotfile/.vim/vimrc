"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Notes:
"   - On getting the clipboard to work in WSL:
"   https://gist.github.com/necojackarc/02c3c81e1525bb5dc3561f378e921541
"
" Sections:
"    -> Plugins
"    -> General
"    -> VIM user interface
"    -> Colors and Fonts
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> Search
"    -> Spell checking
"    -> Misc
"    -> Helper functions
"
" Useful vimscript resources:
" - https://learnvimscriptthehardway.stevelosh.com/
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Sets how many lines of history VIM has to remember
set history=500

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
autocmd FocusGained,BufEnter * checktime

set nocompatible

let mapleader = "\<space>"
let maplocalleader = "\\"

" Make the colon easier to type in normal mode
nnoremap ; :
nnoremap : ;

set path+=app**


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

packadd minpac
call minpac#init()

" FZF (Fuzzy Finder)
call minpac#add('junegunn/fzf')
nnoremap <leader>f :FZF<CR>
nnoremap <leader>fs :split<CR>:FZF<CR>
nnoremap <leader>fv :vsplit<CR>:FZF<CR>

" Conquer of Completion
call minpac#add('neoclide/coc.nvim', {'branch': 'release'} )
hi Pmenu ctermbg=LightGray
nnoremap <leader>d :CocDiagnostics<cr>

call minpac#add('mattn/emmet-vim')
" https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL
call minpac#add('tpope/vim-unimpaired')
call minpac#add('tpope/vim-projectionist')
call minpac#add('tpope/vim-abolish')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-repeat')
call minpac#add('sheerun/vim-polyglot')
call minpac#add('tpope/vim-rhubarb')
call minpac#add('mileszs/ack.vim')
call minpac#add('prettier/vim-prettier', { 'do': 'yarn install' })
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Search
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" For regular expressions turn magic on
set magic

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Here are the steps to do a multi-file search and replace
" (from Practical Vim, p.239)
" /Pragmatic\ze Vim
" :vimgrep // **/*.txt
" :cfdo %s//Practical/gc
" :cfdo update


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Always show current position
set ruler

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Enable syntax highlighting
syntax enable 

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Always show the status line
set laststatus=2

set cmdheight=2

" Show line numbers
set number

" Always show current position
set ruler

" Highlight (with an underline) the current line in each window
" set cursorline

" Dim status line of inactive windows
highlight StatusLine cterm=bold ctermfg=Black ctermbg=Cyan
highlight StatusLineNC ctermfg=DarkGray ctermbg=White
highlight VertSplit ctermfg=DarkGray ctermbg=Black

" Always keep some lines between cursor and top/bottom of window
set scrolloff=10


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" A buffer becomes hidden when it is abandoned
set hidden

" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile

" Remove trailing whitespace on write
" https://vim.fandom.com/wiki/Remove_unwanted_spaces
autocmd BufWritePre *.exs,*.ex,*.html,*.md %s/\s\+$//e


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Make it easier to move windows around
" Directional window selection is still done via e.g. <C-WH>
nnoremap <C-H>  <C-W>H
nnoremap <C-J>  <C-W>J
nnoremap <C-K>  <C-W>K
nnoremap <C-L>  <C-W>L


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Tab
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab

" Indenting of new lines
set autoindent
set smartindent

" Wrap long lines at wordbreaks
set wrap "Wrap lines
set linebreak
set whichwrap+=<,>,h,l


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Elixir mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup myElixir
  au!

  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " NORMAL
  "
  " pry
  " Remember to run tests in iex, example:
  " `iex -S mix test`
  autocmd FileType elixir nnoremap <buffer> <localleader>r orequire IEx; IEx.pry<esc>

  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " ABBREVIATIONS
  "
  " %__MODULE__{} = 
  autocmd FileType elixir :iabbrev <buffer> mod %__MODULE__{} =
  " %{}
  autocmd FileType elixir :iabbrev <buffer> mpp %{}<left>
  " IO.inspect
  autocmd FileType elixir :iabbrev <buffer> insp IO.inspect(label: "")<left><left>
augroup END


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Embedded Elixir
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" `class=""` add then edit
nnoremap <leader>C 0f>i<Space>class=""<ESC>:noh<CR>i

" `class=""` edit
nnoremap <leader>c V/\%Vclass<CR><ESC>:noh<CR>f";i<Space>

" `<% %> add then edit
nnoremap <leader>e O<%<Space>%><ESC>F%;a

" `<%# %> add then edit
nnoremap <leader>3 O<%#<Space>%><ESC>F#a<Space>

" `=""` and drop into INSERT mode
nnoremap <leader>" i=""<ESC>i

" <% ... %>
autocmd FileType eelixir :iabbrev <buffer> %% <% %><left><left><left>
" <%#  %>
autocmd FileType eelixir :iabbrev <buffer> ## <%# %><left><left><left>
" <%= ... %>
autocmd FileType eelixir :iabbrev <buffer> exp <%= %><left><left><left>
" <%= if ... do %>
autocmd FileType eelixir :iabbrev <buffer> ifdo <%= if do %><left><left><left><left><left><left>
" <% end %>
autocmd FileType eelixir :iabbrev <buffer> ndd <% end %><esc>
" <%= if @live_action == :dev do %>
autocmd FileType eelixir :iabbrev <buffer> dvv <%= if @live_action == :dev do %><!-- <cr> -->

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Common Abbreviations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This function is useful for dealing with unwanted whitespace
" caused by using the spacebar as the keyword to end abbreviations.
" Put this at the end of the abbeviation:
" <C-R>=Eatchar('\s')<CR>
func Eatchar(pat)
  let c = nr2char(getchar(0))
  return (c =~ a:pat) ? '' : c
endfunc

autocmd FileType * :iabbrev <silent> <buffer> dq ""<left><C-R>=Eatchar('\s')<CR>
autocmd FileType * :iabbrev <silent> <buffer> PP ()<left><C-R>=Eatchar('\s')<CR>
autocmd FileType * :iabbrev <silent> <buffer> BB {}<left><C-R>=Eatchar('\s')<CR>




"""""""
" CoC
" Symbol renaming.
" https://github.com/neoclide/coc.nvim
nmap gd <Plug>(coc-definition)
nmap gy <Plug>(coc-type-definition)
nmap gi <Plug>(coc-implementation)
nmap gr <Plug>(coc-references)

noremap <leader>v :e~/.vim/vimrc<cr>
